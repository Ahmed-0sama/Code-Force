<component name="CopyrightManager">
  <copyright>
    <option name="notice" value="#include &lt;bits/stdc++.h&gt;&#10;using namespace std;&#10;#define int long long&#10;#define The_end return 0&#10;#define endl &quot;\n&quot;&#10;const int MOD = 1e9 + 7;&#10;//*=========================&gt;&gt;&gt;Fast-IO-Functions&lt;&lt;&lt;=================&#10;void fastread()&#10;{&#10;    ios_base::sync_with_stdio(false);&#10;    cin.tie(nullptr);&#10;    cout.tie(nullptr);&#10;}&#10;//*=========================&gt;&gt;&gt;File-IO-Functions&lt;&lt;&lt;=================&#10;void fileIO()&#10;{&#10;#ifndef ONLINE_JUDGE&#10;    freopen(&quot;input.txt&quot;, &quot;r&quot;, stdin);&#10;    freopen(&quot;output.txt&quot;, &quot;w&quot;, stdout);&#10;#endif&#10;}&#10;//*=========================&gt;&gt;&gt;Utility-Templates&lt;&lt;&lt;=================&#10;template &lt;typename T&gt; T GCD(T vec, T b) { return (b == 0 ? vec : GCD(b, vec % b)); }&#10;template &lt;typename T&gt; T LCM(T vec, T b) { return (vec / GCD(vec, b) * b); }&#10;template &lt;typename T&gt; T factorial(T n) { return (n == 1 || n == 0) ? 1 : n * factorial(n - 1); }&#10;template &lt;typename T&gt; T fibonacci(T n) { return n &lt;= 1 ? n : fibonacci(n - 1) + fibonacci(n - 2); }&#10;template &lt;typename T&gt; T maxthree(T vec, T b, T c) { return max(vec, max(b, c)); }&#10;template &lt;typename T&gt; T minthree(T vec, T b, T c) { return min(vec, min(b, c)); }&#10;template &lt;typename T&gt; T maxfour(T vec, T b, T c, T d) { return max(max(vec, b), max(c, d)); }&#10;template &lt;typename T&gt; T minfour(T vec, T b, T c, T d) { return min(min(vec, b), min(c, d)); }&#10;&#10;//*=========================&gt;&gt;&gt;Main-Code&lt;&lt;&lt;=======================&#10;signed main(){" />
    <option name="myName" value="me" />
  </copyright>
</component>